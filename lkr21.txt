camel problem

bn_total=int(input("total no of bananas:"))
distance = int(input("Enter the total distance to be covered:"))
camel_capacity = int(input("Capacity of camel:"))
lose=0
start=bn_total
for i in range (distance):
    while start>0:
        start=start-camel_capacity
        if start==1:
            lose=lose-1
        lose=lose+2
    lose=lose-1
    start=bn_total-lose
    if start==0:
        break
print(start)


Max ticket

queue=int(input())
vacancies=[]
s=0

for i in range(queue):
    a=int(input())
    vacancies.append(a)
for i in range(queue):
    ind=vacancies.index(max(vacancies))
    s=s+max(vacancies)
    vacancies[ind]=max(vacancies)-1
print(s)

Graph colouring

import matplotlib.pyplot as plt
import networkx as nx
G = nx.Graph()
colors = {0:'red', 1:'green', 2:'blue'}
G.add_nodes_from([1,2,3,4,5, 6, 7])
G.add_edges_from([(1,4), (1,3), (2,4), (2,7), (3,4), (4,5), (4,6), (5,6), (5,7)])
d = nx.coloring.greedy_color(G, strategy = 'largest_first')
node_colors = []
for i in sorted (d.keys()):
node_colors.append(colors[d[i]])
nx.draw(G, node_color = node_colors, with_labels = True, width = 5)
plt.show()


BFS

graph = {
    'A':['B','C'],
    'B':['P','Q'],
    'C':['M'],
    'Q':['M'],
    'M':[],
    'P':[],
    'Q':[]
}
visited_bfs = []
queue = []
def bfs(visited_bfs, graph, node):
    visited_bfs.append(node)
    queue.append(node)
    while queue:
        s = queue.pop(0)
        print (s,end = " ")
        for neighbour in graph[s]:
            if neighbour not in visited_bfs:
                visited_bfs.append(neighbour)
                queue.append(neighbour)
                
bfs(visited_bfs,graph,'A')

DFS

visited=set()

def dfs(visited,graph,node):
    if node not in visited:
        print(node,end=" ")
        visited.add(node)
        for neighbour in graph[node]:
            dfs(visited,graph,neighbour)

BestFS

from collections import defaultdict
from queue import PriorityQueue 

class Graph:
 
    def __init__(self):
        self.graph = defaultdict(list)
 
 
    def addEdge(self,u,v):
        self.graph[u].append([v]) 
  
    def BFS(self, start, goal, hn):
        q = PriorityQueue()
        path = {}
        visited = []
        q.put((hn[start], start, start))

        while q:
            top = q.get()
            visited.append(top[1])
            if top[1] not in path:
                path[top[1]] = top[2]

            if top[1] == goal:
                res = []
                i = goal
                while i != start:
                    res.append(i)
                    i = path[i]
                res.append(start)
                res.reverse()
                return res
            for node in self.graph[top[1]]:
                if node not in visited:
                    q.put((hn[node[0]], node[0], top[1]))
g = Graph()
print ("Best First Search: ")
g.addEdge("Home", "School");
g.addEdge("Home", "Garden");
g.addEdge("Home", "Bank");
g.addEdge("School", "Post_Office");
g.addEdge("School", "Railway_Station");
g.addEdge("Railway_Station", "University");
g.addEdge("Bank", "Police_Station");
g.addEdge("Police_Station", "University");
g.addEdge("Garden", "Railway_Station");

hn = {'Home': 0 , 'School': 50, 'Post_Office': 59, 'Railway_Station': 75, 'Garden': 40, 'Bank': 45,
            'Police_Station': 60, 'University': 28}
            
start = 'Home'
end = 'University'

path = g.BFS(start, end, hn)
print("Shortest path of traversal => ", path)


A*

    class Graph:
    def __init__(self, graph_dict=None, directed=True):
        self.graph_dict = graph_dict or {}
        self.directed = directed
        if not directed:
            self.make_undirected()
    def make_undirected(self):
        for a in list(self.graph_dict.keys()):
            for (b, dist) in self.graph_dict[a].items():
                self.graph_dict.setdefault(b, {})[a] = dist
    def connect(self, A, B, distance=1):
        self.graph_dict.setdefault(A, {})[B] = distance
        if not self.directed:
            self.graph_dict.setdefault(B, {})[A] = distance
    def get(self, a, b=None):
        links = self.graph_dict.setdefault(a, {})
        if b is None:
            return links
        else:
            return links.get(b)
    def nodes(self):
        s1 = set([k for k in self.graph_dict.keys()])
        s2 = set([k2 for v in self.graph_dict.values() for k2, v2 in v.items()])
        nodes = s1.union(s2)
        return list(nodes)
class Node:
    
    def __init__(self, name:str, parent:str):
        self.name = name
        self.parent = parent
        self.g = 0 
        self.h = 0 
        self.f = 0 

    def __eq__(self, other):
        return self.name == other.name

    def __lt__(self, other):
         return self.f < other.f

    def __repr__(self):
        return ('({0},{1})'.format(self.name, self.f))

def astar_search(graph, heuristics, start, end):
    

    open = []
    closed = []

    start_node = Node(start, None)
    goal_node = Node(end, None)

    open.append(start_node)
    

    while len(open) > 0:

        open.sort()

        current_node = open.pop(0)
  
        closed.append(current_node)
        if current_node == goal_node:
            path = []
            while current_node != start_node:
                path.append(current_node.name + ': ' + str(current_node.g))
                current_node = current_node.parent
            path.append(start_node.name + ': ' + str(start_node.g))

            return path[::-1]

        neighbors = graph.get(current_node.name)

        for key, value in neighbors.items():
   
            neighbor = Node(key, current_node)
    
            if(neighbor in closed):
                continue
    
            neighbor.g = current_node.g + graph.get(current_node.name, neighbor.name)
            neighbor.h = heuristics.get(neighbor.name)
            neighbor.f = neighbor.g + neighbor.h
        
            if(add_to_open(open, neighbor) == True):
     
                open.append(neighbor)
  
    return None

def add_to_open(open, neighbor):
    for node in open:
        if (neighbor == node and neighbor.f > node.f):
            return False
    return True

def main():
  
    graph = Graph()

    graph.connect('Home', 'School', 50)
    graph.connect('School', 'Post_office', 59)
    graph.connect('School', 'Railway_station', 75)
    graph.connect('Railway_station', 'University', 40)
    graph.connect('Home', 'Garden', 40)
    graph.connect('Garden', 'Railway_station', 72)
    graph.connect('Home', 'Bank', 45)
    graph.connect('Bank', 'Police_station', 60)
    graph.connect('Police_station', 'University', 28)
    graph.make_undirected()
 
    heuristics = {}
    heuristics['Post_office'] = 109
    heuristics['School'] = 50
    heuristics['Railway_station'] = 112
    heuristics['Garden'] = 40
    heuristics['Police_station'] =105
    heuristics['Bank'] = 45
    heuristics['University'] = 133
    heuristics['Home'] = 0

    path = astar_search(graph, heuristics, 'Home', 'University')
    print("Shortest path to University =>", path)
    print()

if __name__ == "__main__": main()


FUZZY

import fuzzywuzzy
from fuzzywuzzy import fuzz 
from fuzzywuzzy import process 
str1=input("Enter string one: ") 
str2=input("Enter string two: ")
ratio = fuzz.ratio(str1.lower(), str2.lower()) 
print('Similarity score: {}'.format(ratio))


Linear regression - supervised

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
data = pd.read_csv('Salary_Data.csv')
x = data['YearsExperience']
y = data['Salary']
print(data.head())
def linear_regression(x, y):     
    N = len(x)
    x_mean = x.mean()
    y_mean = y.mean()
    
    B1_num = ((x - x_mean) * (y - y_mean)).sum()
    B1_den = ((x - x_mean)**2).sum()
    B1 = B1_num / B1_den
    
    B0 = y_mean - (B1*x_mean)
    
    reg_line = 'y = {} + {}Î²'.format(B0, round(B1, 3))
    
    return (B0, B1, reg_line)
N = len(x)
x_mean = x.mean()
y_mean = y.mean()
B1_num = ((x - x_mean) * (y - y_mean)).sum()
B1_den = ((x - x_mean)**2).sum()
B1 = B1_num / B1_den
B0 = y_mean - (B1 * x_mean)
def corr_coef(x, y):
    N = len(x)
    
    num = (N * (x*y).sum()) - (x.sum() * y.sum())
    den = np.sqrt((N * (x**2).sum() - x.sum()**2) * (N * (y**2).sum() - y.sum()**2))
    R = num / den
    return R
B0, B1, reg_line = linear_regression(x, y)
print('Regression Line: ', reg_line)
R = corr_coef(x, y)
print('Correlation Coef.: ', R)
print('"Goodness of Fit": ', R**2)
plt.figure(figsize=(12,5))
plt.scatter(x, y, s=300, linewidths=1, edgecolor='black')
text = '''X Mean: {} Years
Y Mean: ${}
R: {}
R^2: {}
y = {} + {}X'''.format(round(x.mean(), 2), 
                       round(y.mean(), 2), 
                       round(R, 4), 
                       round(R**2, 4),
                       round(B0, 3),
                       round(B1, 3))
plt.text(x=1, y=100000, s=text, fontsize=12, bbox={'facecolor': 'grey', 'alpha': 0.2, 'pad': 10})
plt.title('How Experience Affects Salary')
plt.xlabel('Years of Experience', fontsize=15)
plt.ylabel('Salary', fontsize=15)
plt.plot(x, B0 + B1*x, c = 'r', linewidth=5, alpha=.5, solid_capstyle='round')
plt.scatter(x=x.mean(), y=y.mean(), marker='*', s=10**2.5, c='r')


Unsupervised

import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
from sklearn.datasets import make_blobs
from sklearn.cluster import KMeans
X, y = make_blobs(n_samples=300, centers=4, cluster_std=0.60, random_state=0)
plt.scatter(X[:,0], X[:,1])
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10, random_state=0)
    kmeans.fit(X)
    wcss.append(kmeans.inertia_)
plt.plot(range(1, 11), wcss)
plt.title('Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()
kmeans = KMeans(n_clusters=4, init='k-means++', max_iter=300, n_init=10, random_state=0)
pred_y = kmeans.fit_predict(X)
plt.scatter(X[:,0], X[:,1])
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red')
plt.show()



unification and resolution

Code (unification):
def get_index_comma(string):
index_list = list()
par_count = 0
for i in range(len(string)):
if string[i] == ',' and par_count == 0:
index_list.append(i)
elif string[i] == '(':
par_count += 1
elif string[i] == ')':
par_count -= 1
return index_list
def is_variable(expr):
for i in expr:
if i == '(' or i == ')':
return False
return True
def process_expression(expr):
expr = expr.replace(' ', '')
index = None
for i in range(len(expr)):
if expr[i] == '(':
index = i
break
predicate_symbol = expr[:index]
expr = expr.replace(predicate_symbol, '')
expr = expr[1:len(expr) - 1]
arg_list = list()
indices = get_index_comma(expr)
if len(indices) == 0:
arg_list.append(expr)
else:
arg_list.append(expr[:indices[0]])
for i, j in zip(indices, indices[1:]):
arg_list.append(expr[i + 1:j])
arg_list.append(expr[indices[len(indices) - 1] + 1:])
return predicate_symbol, arg_list
def get_arg_list(expr):
_, arg_list = process_expression(expr)
flag = True
while flag:
flag = False
for i in arg_list:
if not is_variable(i):
flag = True
_, tmp = process_expression(i)
for j in tmp:
if j not in arg_list:
arg_list.append(j)
arg_list.remove(i)
return arg_list
def check_occurs(var, expr):
arg_list = get_arg_list(expr)
if var in arg_list:
return True
return False
def unify(expr1, expr2):
if is_variable(expr1) and is_variable(expr2):
if expr1 == expr2:
return 'Null'
else:
return False
elif is_variable(expr1) and not is_variable(expr2):
if check_occurs(expr1, expr2):
return False
else:
tmp = str(expr2) + '/' + str(expr1)
return tmp
elif not is_variable(expr1) and is_variable(expr2):
if check_occurs(expr2, expr1):
return False
else:
tmp = str(expr1) + '/' + str(expr2)
return tmp
else:
predicate_symbol_1, arg_list_1 = process_expression(expr1)
predicate_symbol_2, arg_list_2 = process_expression(expr2)
# Step 2
if predicate_symbol_1 != predicate_symbol_2:
return False
# Step 3
elif len(arg_list_1) != len(arg_list_2):
return False
else:
# Step 4: Create substitution list
sub_list = list()
# Step 5:
for i in range(len(arg_list_1)):
tmp = unify(arg_list_1[i], arg_list_2[i])
if not tmp:
return False
elif tmp == 'Null':
pass
else:
if type(tmp) == list:
for j in tmp:
sub_list.append(j)
else:
sub_list.append(tmp)
# Step 6
return sub_list
if __name__ == '__main__':
f1 = 'Q(a, g(x, a), f(y))'
f2 = 'Q(a, g(f(b), a), x)'
# f1 = input('f1 : ')
# f2 = input('f2 : ')
result = unify(f1, f2)
if not result:
print('The process of Unification failed!')
else:
print('The process of Unification successful!')
print(result)


Code (resolution):
import copy
import time
class Parameter:
variable_count = 1
def __init__(self, name=None):
if name:
self.type = "Constant"
self.name = name
else:
self.type = "Variable"
self.name = "v" + str(Parameter.variable_count)
Parameter.variable_count += 1
def isConstant(self):
return self.type == "Constant"
def unify(self, type_, name):
self.type = type_
self.name = name
def __eq__(self, other):
return self.name == other.name
def __str__(self):
return self.name
class Predicate:
def __init__(self, name, params):
self.name = name
self.params = params
def __eq__(self, other):
return self.name == other.name and all(a == b for a, b in zip(self.params,
other.params))
def __str__(self):
return self.name + "(" + ",".join(str(x) for x in self.params) + ")"
def getNegatedPredicate(self):
return Predicate(negatePredicate(self.name), self.params)
class Sentence:
sentence_count = 0
def __init__(self, string):
self.sentence_index = Sentence.sentence_count
Sentence.sentence_count += 1
self.predicates = []
self.variable_map = {}
local = {}
for predicate in string.split("|"):
name = predicate[:predicate.find("(")]
params = []
for param in predicate[predicate.find("(") + 1:
predicate.find(")")].split(","):
if param[0].islower():
if param not in local: # Variable
local[param] = Parameter()
self.variable_map[local[param].name] = local[param]
new_param = local[param]
else:
new_param = Parameter(param)
self.variable_map[param] = new_param
params.append(new_param)
self.predicates.append(Predicate(name, params))
def getPredicates(self):
return [predicate.name for predicate in self.predicates]
def findPredicates(self, name):
return [predicate for predicate in self.predicates if predicate.name == name]
def removePredicate(self, predicate):
self.predicates.remove(predicate)
for key, val in self.variable_map.items():
if not val:
self.variable_map.pop(key)
def containsVariable(self):
return any(not param.isConstant() for param in self.variable_map.values())
def __eq__(self, other):
if len(self.predicates) == 1 and self.predicates[0] == other:
return True
return False
def __str__(self):
return "".join([str(predicate) for predicate in self.predicates])
class KB:
def __init__(self, inputSentences):
self.inputSentences = [x.replace(" ", "") for x in inputSentences]
self.sentences = []
self.sentence_map = {}
def prepareKB(self):
self.convertSentencesToCNF()
for sentence_string in self.inputSentences:
sentence = Sentence(sentence_string)
for predicate in sentence.getPredicates():
self.sentence_map[predicate] = self.sentence_map.get(
predicate, []) + [sentence]
def convertSentencesToCNF(self):
for sentenceIdx in range(len(self.inputSentences)):
# Do negation of the Premise and add them as literal
if "=>" in self.inputSentences[sentenceIdx]:
self.inputSentences[sentenceIdx] = negateAntecedent(
self.inputSentences[sentenceIdx])
def askQueries(self, queryList):
results = []
for query in queryList:
negatedQuery = Sentence(negatePredicate(query.replace(" ", "")))
negatedPredicate = negatedQuery.predicates[0]
prev_sentence_map = copy.deepcopy(self.sentence_map)
self.sentence_map[negatedPredicate.name] = self.sentence_map.get(
negatedPredicate.name, []) + [negatedQuery]
self.timeLimit = time.time() + 40
try:
result = self.resolve([negatedPredicate], [
False]*(len(self.inputSentences) + 1))
except:
result = False
self.sentence_map = prev_sentence_map
if result:
results.append("TRUE")
else:
results.append("FALSE")
return results
def resolve(self, queryStack, visited, depth=0):
if time.time() > self.timeLimit:
raise Exception
if queryStack:
query = queryStack.pop(-1)
negatedQuery = query.getNegatedPredicate()
queryPredicateName = negatedQuery.name
if queryPredicateName not in self.sentence_map:
return False
else:
queryPredicate = negatedQuery
for kb_sentence in self.sentence_map[queryPredicateName]:
if not visited[kb_sentence.sentence_index]:
for kbPredicate in
kb_sentence.findPredicates(queryPredicateName):
canUnify, substitution = performUnification(
copy.deepcopy(queryPredicate), copy.deepcopy(kbPredicate))
if canUnify:
newSentence = copy.deepcopy(kb_sentence)
newSentence.removePredicate(kbPredicate)
newQueryStack = copy.deepcopy(queryStack)
if substitution:
for old, new in substitution.items():
if old in newSentence.variable_map:
parameter = newSentence.variable_map[old]
newSentence.variable_map.pop(old)
parameter.unify(
"Variable" if new[0].islower() else "Constant", new)
newSentence.variable_map[new] = parameter
for predicate in newQueryStack:
for index, param in enumerate(predicate.params):
if param.name in substitution:
new = substitution[param.name]
predicate.params[index].unify(
"Variable" if new[0].islower() else "Constant",
new)
for predicate in newSentence.predicates:
newQueryStack.append(predicate)
new_visited = copy.deepcopy(visited)
if kb_sentence.containsVariable() and
len(kb_sentence.predicates) > 1:
new_visited[kb_sentence.sentence_index] = True
if self.resolve(newQueryStack, new_visited, depth + 1):
return True
return False
return True
def performUnification(queryPredicate, kbPredicate):
substitution = {}
if queryPredicate == kbPredicate:
return True, {}
else:
for query, kb in zip(queryPredicate.params, kbPredicate.params):
if query == kb:
continue
if kb.isConstant():
if not query.isConstant():
if query.name not in substitution:
substitution[query.name] = kb.name
elif substitution[query.name] != kb.name:
return False, {}
query.unify("Constant", kb.name)
else:
return False, {}
else:
if not query.isConstant():
if kb.name not in substitution:
substitution[kb.name] = query.name
elif substitution[kb.name] != query.name:
return False, {}
kb.unify("Variable", query.name)
else:
if kb.name not in substitution:
substitution[kb.name] = query.name
elif substitution[kb.name] != query.name:
return False, {}
return True, substitution
def negatePredicate(predicate):
return predicate[1:] if predicate[0] == "~" else "~" + predicate
def negateAntecedent(sentence):
antecedent = sentence[:sentence.find("=>")]
premise = []
for predicate in antecedent.split("&"):
premise.append(negatePredicate(predicate))
premise.append(sentence[sentence.find("=>") + 2:])
return "|".join(premise)
def getInput(filename):
with open(filename, "resolutionINPUT") as file:
#dajhdfkjhakjdhfkjahkjfdhakjhfdkjahfdkjhashfd
noOfQueries = int(file.readline().strip())
inputQueries = [file.readline().strip() for _ in range(noOfQueries)]
noOfSentences = int(file.readline().strip())
inputSentences = [file.readline().strip()
for _ in range(noOfSentences)]
return inputQueries, inputSentences
def printOutput(filename, results):
print(results)
with open(filename, "w") as file:
for line in results:
file.write(line)
file.write("\n")
file.close()
if __name__ == '__main__':
inputQueries_, inputSentences_ = getInput('./resolutionINPUT.txt')
knowledgeBase = KB(inputSentences_)
knowledgeBase.prepareKB()
results_ = knowledgeBase.askQueries(inputQueries_)
printOutput("output.txt", results_)



    



